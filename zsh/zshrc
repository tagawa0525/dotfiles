#! /bin/zsh

################################################################################
# 非端末プロセスなら終了
# スクリプトとして起動された場合、ここでプロセスが終了する
[ ${#PROMPT} -eq 0 -o ${#TERM} -eq 0 ] && return
################################################################################

umask 002
stty stop undef
################################################################################
# 履歴の設定
################################################################################
HISTFILE=${HOME}/.zsh/.ZSHRC_HISTFILE
HISTSIZE=100000
SAVEHIST=100000
# 履歴オプション
setopt    bang_hist             # csh スタイルのヒストリ置換
setopt    extended_history      # 開始/終了タイムスタンプを書き込み
unsetopt  histallowclobber      # ">" を ">!" としてヒストリ保存、はしない
setopt    append_history        # 履歴を追加 (毎回 .zhistory を作るのではなく)
setopt    inc_append_history    # 履歴をインクリメンタルに追加
setopt    share_history         # 履歴の共有
setopt    hist_ignore_all_dups  # 重複するコマンド行は古い方を削除
setopt    hist_ignore_dups      # 直前と同じコマンドラインはヒストリに追加しない
setopt    hist_ignore_space     # スペースで始まるコマンド行はヒストリリストから削除(先頭にスペースを入れておけば、ヒストリに保存されない)
unsetopt  hist_verify           # ヒストリを呼び出してから実行する間に一旦編集可能を停止、はしない
setopt    hist_reduce_blanks    # 余分な空白は詰めて記録
setopt    hist_save_no_dups     # ヒストリファイルに書き出すときに、古いコマンドと同じものは無視する
setopt    hist_no_store         # historyコマンドは履歴に登録しない
setopt    hist_expand           # 補完時にヒストリを自動的に展開

################################################################################
# 補完
################################################################################
autoload -U compinit
compinit -u
# 補完の表示設定
zstyle ':completion:*:default' menu select=1                    # 補完候補のカーソル選択を有効に
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}   # 補完候補の色づけ
fignore=(.o .mod .aux .log - \~)                                # 補完時に無視するファイルの種類
cdpath=()                                                       # 補間に加えるリスト
LISTMAX=0                                                       # 補間リストを表示するか尋ねる行数
zstyle ':completion:*' vebose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches'
zstyle ':completion:*' group-name

# 補完オプション
setopt    correct             # スペルミスを補完
setopt    list_packed         # コンパクトに補完リストを表示
setopt    auto_remove_slash   # 接尾辞を削除
setopt    auto_param_slash    # ディレクトリ名の補完で末尾の / を自動的に付加
setopt    mark_dirs           # ファイル名の展開でディレクトリにマッチした場合 末尾に / を付加
setopt    list_types          # 補完候補一覧でファイルの種別を識別マーク表示 (訳注:ls -F の記号)
unsetopt  complete_aliases    # 補完動作の解釈前にエイリアス展開、はしない
unsetopt  menu_complete       # 補完の際に、可能なリストを表示してビープを鳴らすのではなく、最初にマッチしたものをいきなり挿入、はしない
setopt    auto_list           # ^Iで補完可能な一覧を表示する(補完候補が複数ある時に、一覧表示)
setopt    auto_menu           # 補完キー連打で順に補完候補を自動で補完
setopt    auto_param_keys     # カッコの対応などを自動的に補完

################################################################################
# Hook関数
################################################################################
function chpwd() {  # cd実行後
  ls                # ls
  _cdd_chpwd        # cddの登録
}

function preexec() {  # コマンド実行前
  [ -n "${STY}" ] && echo -en "\ek${1%% 2%% *}\e\\"   # for screen
  [ -n "${TMUX}" ] && tmux rename-window ${1%% 2%% *} # for tmux
} 

function precmd() { # プロンプト表示前(コマンド実行後)
  [ -n "${STY}" ] && echo -en "\ek$(basename $(pwd))\e\\"   # for screen
  [ -n "${TMUX}" ] && tmux rename-window $(basename $(pwd)) # for tmux
} 

################################################################################
# プロンプト
################################################################################
PROMPT="%n@%m %! [ %F{red}%~%f ]
%# "
PROMPT2="%_%# "

# プロンプトオプション
setopt    prompt_subst
setopt    always_last_prompt  # カーソル位置は保持したままファイル名一覧を順次その場で表示

################################################################################
# その他のオプション
################################################################################
unsetopt  auto_cd             # ディレクトリのみで移動はしない
setopt    notify              # バックグラウンドジョブが終了したら(プロンプトの表示を待たずに)すぐに知らせる
setopt    auto_resume         # サスペンド中のプロセスと同じコマンド名を実行した場合はリジューム
setopt    no_beep             # コマンド入力エラーでBeepを鳴らさない
setopt    brace_ccl           # ブレース展開機能を有効にする
setopt    bsd_echo
setopt    complete_in_word
setopt    equals              # =COMMAND を COMMAND のパス名に展開
setopt    extended_glob       # 拡張グロブを有効にする
unsetopt  flow_control        # (shell editor 内で) C-s, C-q を無効にする
setopt    no_flow_control     # C-s/C-q によるフロー制御を使わない
setopt    hash_cmds           # 各コマンドが実行されるときにパスをハッシュに入れる
setopt    no_hup              # ログアウト時にバックグラウンドジョブをkillしない
setopt    no_checkjobs
unsetopt  ignore_eof          # C-dでログアウトを禁止、はしない
setopt    long_list_jobs      # 内部コマンド jobs の出力をデフォルトで jobs -L にする
setopt    magic_equal_subst   # コマンドラインの引数で --PREFIX=/USR などの = 以降でも補完できる
setopt    mail_warning
setopt    multios             # 複数のリダイレクトやパイプなど、必要に応じて TEE や CAT の機能が使われる
setopt    numeric_glob_sort   # 数字を数値と解釈してソートする
setopt    no_glob_dots        # "*" にドットファイルをマッチさせない
setopt    path_dirs           # コマンド名に / が含まれているとき PATH 中のサブディレクトリを探す
setopt    print_eight_bit     # 補完候補リストの日本語を適正表示
setopt    short_loops         # FOR, REPEAT, SELECT, IF, FUNCTION などで簡略文法が使えるようになる
setopt    auto_name_dirs
unsetopt  cdable_vars         # cd の引数のディレクトリがない場合 ~をつけて展開、はしない
unsetopt  sh_word_split       # 変数内の文字列分解のデリミタ
setopt    auto_pushd          # 普通に cd するときにもディレクトリスタックにそのディレクトリを入れる
setopt    pushd_ignore_dups   # ディレクトリスタックに重複する物は古い方を削除
setopt    pushd_to_home       # pushd 引数ナシ == pushd ${HOME}
setopt    pushd_silent        # pushd,popdの度にディレクトリスタックの中身を表示しない
setopt    rm_star_silent      # "rm * " を実行する前に確認しない

################################################################################
# その他の設定ファイルの読み込み
################################################################################
for name in `uname` 'alias' 'screen' 'tmux' 'cdd' ; do
  file=${HOME}/.zsh/${name}.zshrc
  [ -f ${file} ] && source ${file}
done
unset name file

typeset -U path cdpath fpath manpath ld_library_path
 
if [ -n "${TMUX}" ]; then
  cdd ${CDD_WINDOW}
  [ -n "${STY}" ] && echo -en "\ek$(basename $(pwd))\e\\"   # for screen
  [ -n "${TMUX}" ] && tmux rename-window $(basename $(pwd)) # for tmux
  tmux wait-for -S ${CDD_WINDOW}
fi

